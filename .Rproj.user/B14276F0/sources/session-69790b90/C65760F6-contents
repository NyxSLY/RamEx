#' @import Rcpp
#' @import gpuR
cppFunction('
NumericMatrix convolve_matrix_rcpp(NumericMatrix mat, NumericVector kernel) {
  int nrow = mat.nrow();
  int ncol = mat.ncol();
  int ksize = kernel.size();

  NumericMatrix result(nrow, ncol);

  for (int i = 0; i < nrow; ++i) {
    for (int j = 0; j < ncol; ++j) {
      double sum = 0.0;
      for (int k = 0; k < ksize; ++k) {
        int idx = j - k + ksize / 2;
        if (idx >= 0 && idx < ncol) {
          sum += mat(i, idx) * kernel[k];
        }
      }
      result(i, j) = sum;
    }
  }

  return result;
}
')

#' @import Rcpp
#' @import gpuR
pre_spike_matrix_gpuR <- function(all_data) {
  all_spc <- as.matrix(all_data[,-1])
  all_spc <- matrix(all_spc, nrow = nrow(all_spc), ncol = ncol(all_spc), byrow = FALSE)

  # 将数据转移到 GPU
  all_spc_gpu <- gpuMatrix(all_spc)

  # 定义卷积核
  kernel_ori <- matrix(c(-1,-1,-1, -1,-1,-1, -1,-1,-1, -1,-1,
                        -1,-1,-1, -1,-1,33, -1,-1,-1, -1,-1,
                        -1,-1,-1, -1,-1,-1, -1,-1,-1, -1,-1),nrow = 3)

  # 将卷积核转移到 GPU
  kernel_gpu <- gpuVector(kernel_ori)

  # 在 GPU 上执行卷积操作
  all_spc_convolved_gpu <- convolve_matrix_rcpp(all_spc_gpu, kernel_gpu)

  # 将结果从 GPU 传回 CPU
  all_spc_convolved <- as.matrix(all_spc_convolved_gpu)

  print('=======aaa=======')
  slope_inds_2 <- which(all_spc_convolved > 10*apply(all_spc,1,max),arr.ind = TRUE)

  slope_inds <- slope_inds_2

  spc_new <- all_data
  wavenumber <- as.numeric(as.character(colnames(spc_new[,-1])))

  print(length(unique(slope_inds[,1])))

  for (ind in unique(slope_inds[,1])) {
    spike_pos <- slope_inds[which(slope_inds[,1] == ind),2]
    if(ind <= 3 ) { inds_new <- c((ind+1):(ind+3))}
    if(ind > 3 & ind <= (nrow(all_data)-3)) { inds_new <- c((ind-3):(ind-1),(ind+1):(ind+3))}
    if(ind > (nrow(all_data)-3) ) { inds_new <- c((ind-3):(ind-1))}

    for(i in spike_pos){
      if (i == 1) {
        spc_new[ind, 2:4] <- colMeans(spc_new[inds_new,2:4])
      } else if (i >= (length(wavenumber))) {
        spc_new[ind, (i-2):i] <- colMeans(spc_new[inds_new,(i-2):i])
      } else {
        spc_new[ind, i:(i+2)] <- colMeans(spc_new[inds_new,i:(i+2)])
      }
    }
  }

  return(spc_new)
}
